Now let me create a comprehensive guide for your other website. Here's exactly how location data is stored and how to access it:

Location Data Storage Structure
1. Database Tables:

-- Applications table stores the selected location
applications:
  - locationId: integer (references park_locations.id)
  - customLocationName: text (only used for custom locations)
  - parkId: integer (references parks.id)
-- Park locations table stores all available locations
park_locations:
  - id: serial (primary key)
  - park_id: integer (references parks.id)
  - name: text (location name like "Beach Pavillion")
  - description: text
  - max_capacity: integer
  - permit_cost: double
2. How Location Selection Works:

Standard Locations: User selects from predefined locations → locationId stores the actual database ID (e.g., locationId = 6 for "Beach Pavillion")
Custom Locations: User types custom location → locationId = -1 and customLocationName stores the text
3. API Endpoints for Your Website:

# Get all park locations
GET /api/park-locations
# Get application with location data
GET /api/applications/{applicationId}
4. Sample Code for Your Website:


Created docs/location-integration-guide.md
Perfect! I've created a comprehensive integration guide that explains exactly how your other website can access location data. Here's the summary:

Location Storage System
Database Structure:

applications table: stores locationId (references park_locations.id) and customLocationName (for custom locations)
park_locations table: stores all available locations with IDs, names, costs, etc.
Location Types:

Standard locations: locationId = actual database ID (like 6 for "Beach Pavillion")
Custom locations: locationId = -1, customLocationName = user text
API Access:

GET /api/park-locations - gets all available locations
GET /api/applications/{id} - gets application with location data
Real Example:
Your recent test application #89 has:

locationId: 2 (which maps to "Food Truck Food Court")
customLocationName: null
For Your Website:

Fetch the application to get locationId and customLocationName
If locationId = -1, use customLocationName
If locationId > 0, look up the location details in park_locations table
You now have the exact location the user selected
The guide includes sample code and SQL queries you can use to integrate this data into your other website. Your database now stores reliable location IDs instead of random numbers, so your external system can confidently look up location details.